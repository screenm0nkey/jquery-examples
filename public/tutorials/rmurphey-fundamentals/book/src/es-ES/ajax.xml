<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Ajax</title>

  <section>
    <title>Sinopsis</title>

    <para>El método XMLHttpRequest (XHR) permite que los exploradores se comuniquen con el servidor sin requerir una recarga de la página. Este método, conocido también como Ajax (Asynchronous JavaScript and XML o JavaScript y XML Asincrónico), permite que páginas web provean experiencias ricas e interactivas. </para>

    <para>Solicitudes de Ajax son iniciadas por código JavaScript; su código envía una solicitud a un URL, y cuando éste recibe una respuesta, una función "callback" puede iniciarse para manipular la respuesta. como la solicitud es asincrónica, el resto de su código se continúa ejecutando mientras la solicitud está siendo procesada, así que es importante que un callback se use para manipular la respuesta.</para>

    <para>jQuery provee soporte de Ajax que abstrae las dolorosas diferencias entre exploradores. Ofrece un poderoso método <code>$.ajax()</code> al igual que métodos convenientes tales como <code>$.get()</code>, <code>$.getScript</code>, <code>$.getJSON()</code>, <code>$.post()</code>, and <code>$().load()</code>.</para>

    <para>La mayoría de aplicaciones con jQuery no usan XML, a pesar del nombre “Ajax”; en su lugar, transportan datos como HTML o JSON (JavaScript Object Notation o Notación de Objetos JavaScript).</para>

    <para>En general, Ajax no funciona a través de diferentes dominios. Servicios que proveen soporte de JSONP (JSON with Padding), los cuales permiten funcionalidad entre-dominios limitada. </para>
  </section>

  <section>
    <title>Conceptos Clave</title>

    <para>El uso apropiado de métodos de jQuery relacionados a Ajax requiere la comprensión de algunos conceptos clave primero.</para>

    <section>
      <title>GET vs. Post</title>

      <para>Los dos “métodos” más comunes para enviar solicitudes a un servidor son GET y POST. Es importante comprender la aplicación correcta de cada uno.</para>

      <para>El método GET debe ser usado en operaciones no-destructivas — es decir, operaciones en las cuales usted únicamente está “obteniendo” datos del servidor, y no modificando data en el servidor. Por ejemplo, una consulta a un servicio de búsqueda puede ser una solicitud GET. Las solicitudes GET pueden ser almacenadas en caché por el explorador, las cuales pueden provocar comportamiento imprevisible si usted no lo está esperando. Las solicitudes GET envían generalmente todos sus datos en una cadena de consulta (query string).</para>

      <para>El método POST debe ser usado en operaciones destructivas — es decir, operaciones en las cuales usted únicamente está modificando datos en el servidor. Por ejemplo, un usuario almacenando una entrada de blog debe ser una solicitud POST. Las solicitudes POST no son almacenadas en el cache por el explorador generalmente; una cadena de consulta puede ser parte del URL, pero los datos se envían generalmente como datos post.</para>
    </section>

    <section>
      <title>Tipos de Dato</title>

      <para>jQuery requiere generalmente alguna instruccion en cuanto al tipo de datos que usted espera recibir de una solicitud Ajax; en algunos casos el tipo de datos se especifica en el nombre del método, en otros casos se provee como un objeto de configuración. Hay varias opciones:</para>

      <variablelist>
        <varlistentry>
          <term>text</term>

          <listitem>
            <para>Para transportar cadenas simples</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>html</term>

          <listitem>
            <para>Para transportar bloques de HTML que serán ubicados en la página</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>script</term>

          <listitem>
            <para>Para agregar un script a la página</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>json</term>

          <listitem>
            <para>Para transportar datos con formato JSON, los cuales pueden incluir cadenas, arreglos (arrays), y objetos<note>
                <para>Desde jQuery 1.4, si los datos JSON enviados por su servidor no se tienen el formato correcto, la solicitud puede fallar silenciosamente. Vea
                <link xlink:href="http://json.org">http://json.org</link> para detalles en el formato correcto para JSON, pero como regla general, use métodos incorporados en el lenguaje de servidor para generar JSON  y evitar conflictos de sintaxis.</para>
              </note></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>jsonp</term>

          <listitem>
            <para>Para transportar datos JSON desde otro dominio</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>xml</term>

          <listitem>
            <para>Para transportar datos en un esquema de XML personalizado</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <remark>Soy una fuerte defensora de utilizar el formato JSON en la mayoría de los casos, ya que proporciona la mayor flexibilidad. Es especialmente útil para el envío de HTML y de datos al mismo tiempo.</remark>
    </section>

    <section>
      <title>A es por Asincrónico</title>

      <para>La asincronicicidad de Ajax toma a muchos usuarios nuevos de jQuery por sorpresa. Como las llamadas de Ajax son asincrónicas por predeterminación, la respuesta no se encuentra disponible inmediatamente. Las respuestas pueden ser manipuladas únicamente al usar un callback. Así que, por ejemplo, el siguiente código no funcionará:</para>

      <programlisting>$.get('foo.php');
console.log(response);</programlisting>

      <para>Instead, we need to pass a callback function to our request; this
      callback will run when the request succeeds, at which point we can
      access the data that it returned, if any. <programlisting>$.get('foo.php', function(response) { console.log(response); });</programlisting></para>
    </section>

    <section>
      <title>Same-Origin Policy and JSONP</title>

      <para>In general, Ajax requests are limited to the same protocol (http
      or https), the same port, and the same domain as the page making the
      request. This limitation does not apply to scripts that are loaded via
      jQuery's Ajax methods.</para>

      <para>The other exception is requests targeted at a JSONP service on
      another domain. In the case of JSONP, the provider of the service has
      agreed to respond to your request with a script that can be loaded into
      the page using a <code>&lt;script&gt;</code> tag, thus avoiding the
      same-origin limitation; that script will include the data you requested,
      wrapped in a callback function you provide.</para>
    </section>

    <section>
      <title>Ajax and Firebug</title>

      <para>Firebug (or the Webkit Inspector in Chrome or Safari) is an
      invaluable tool for working with Ajax requests. You can see Ajax
      requests as they happen in the Console tab of Firebug (and in the
      Resources &gt; XHR panel of Webkit Inspector), and you can click on a
      request to expand it and see details such as the request headers,
      response headers, response content, and more. If something isn't going
      as expected with an Ajax request, this is the first place to look to
      track down what's wrong.</para>
    </section>
  </section>

  <section>
    <title>jQuery's Ajax-Related Methods</title>

    <para>While jQuery does offer many Ajax-related convenience methods, the
    core <code>$.ajax</code> method is at the heart of all of them, and
    understanding it is imperative. We'll review it first, and then touch
    briefly on the convenience methods.</para>

    <remark>I generally use the $.ajax method and do not use convenience
    methods. As you'll see, it offers features that the convenience methods do
    not, and its syntax is more easily understandable, in my opinion.</remark>

    <section>
      <title>$.ajax</title>

      <para>jQuery’s core <code>$.ajax</code> method is a powerful and
      straightforward way of creating Ajax requests. It takes a configuration
      object that contains all the instructions jQuery requires to complete
      the request. The <code>$.ajax</code> method is particularly valuable
      because it offers the ability to specify both success and failure
      callbacks. Also, its ability to take a configuration object that can be
      defined separately makes it easier to write reusable code. For complete
      documentation of the configuration options, visit <link
      xlink:href="http://api.jquery.com/jQuery.ajax/">http://api.jquery.com/jQuery.ajax/</link>.</para>

      <example>
        <title>Using the core $.ajax method</title>

        <programlisting>$.ajax({
    // the URL for the request
    url : 'post.php',

    // the data to send 
    // (will be converted to a query string)
    data : { id : 123 },

    // whether this is a POST or GET request
    method : 'GET',

    // the type of data we expect back
    dataType : 'json',

    // code to run if the request succeeds;
    // the response is passed to the function
    success : function(json) {
        $('&lt;h1/&gt;').text(json.title).appendTo('body');
        $('&lt;div class="content"/&gt;')
            .html(json.html).appendTo('body');
    },

    // code to run if the request fails;
    // the raw request and status codes are 
    // passed to the function
    error : function(xhr, status) {
        alert('Sorry, there was a problem!');
    },

    // code to run regardless of success or failure
    complete : function(xhr, status) {
        alert('The request is complete!');
    }
});</programlisting>
      </example>

      <note>
        <para>A note about the <code>dataType</code> setting: if the server
        sends back data that is in a different format than you specify, your
        code may fail, and the reason will not always be clear, because the
        HTTP response code will not show an error. When working with Ajax
        requests, make sure your server is sending back the data type you're
        asking for, and verify that the Content-type header is accurate for
        the data type. For example, for JSON data, the Content-type header
        should be <code>application/json</code>.</para>
      </note>

      <section>
        <title><code>$.ajax</code> Options</title>

        <para>There are many, many options for the $.ajax method, which is
        part of its power. For a complete list of options, visit <link
        xlink:href="http://api.jquery.com/jQuery.ajax/">http://api.jquery.com/jQuery.ajax/</link>;
        here are several that you will use frequently:</para>

        <variablelist>
          <varlistentry>
            <term>async</term>

            <listitem>
              <para>Set to <code>false</code> if the request should be sent
              synchronously. Defaults to <code>true</code>. Note that if you
              set this option to false, your request will block execution of
              other code until the response is received.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>cache</term>

            <listitem>
              <para>Whether to use a cached response if available. Defaults to
              <code>true</code> for all dataTypes except "script" and "jsonp".
              When set to false, the URL will simply have a cachebusting
              parameter appended to it.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>complete</term>

            <listitem>
              <para>A callback function to run when the request is complete,
              regardless of success or failure. The function receives the raw
              request object and the text status of the request.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>context</term>

            <listitem>
              <para>The scope in which the callback function(s) should run
              (i.e. what <code>this</code> will mean inside the callback
              function(s)). By default, <code>this</code> inside the callback
              function(s) refers to the object originally passed to
              <code>$.ajax</code>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>data</term>

            <listitem>
              <para>The data to be sent to the server. This can either be an
              object or a query string, such as
              <code>foo=bar&amp;baz=bim</code>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>dataType</term>

            <listitem>
              <para>The type of data you expect back from the server. By
              default, jQuery will look at the MIME type of the response if no
              dataType is specified.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>error</term>

            <listitem>
              <para>A callback function to run if the request results in an
              error. The function receives the raw request object and the text
              status of the request.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>jsonp</term>

            <listitem>
              <para>The callback name to send in a query string when making a
              JSONP request. Defaults to "callback".</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>success</term>

            <listitem>
              <para>A callback function to run if the request succeeds. The
              function receives the response data (converted to a JavaScript
              object if the dataType was JSON), as well as the text status of
              the request and the raw request object.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>timeout</term>

            <listitem>
              <para>The time in milliseconds to wait before considering the
              request a failure.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>traditional</term>

            <listitem>
              <para>Set to true to use the param serialization style in use
              prior to jQuery 1.4. For details, see <link
              xlink:href="http://api.jquery.com/jQuery.param/">http://api.jquery.com/jQuery.param/</link>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>type</term>

            <listitem>
              <para>The type of the request, "POST" or "GET". Defaults to
              "GET". Other request types, such as "PUT" and "DELETE" can be
              used, but they may not be supported by all browsers.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>url</term>

            <listitem>
              <para>The URL for the request.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>The <code>url</code> option is the only required property of the
        <code>$.ajax</code> configuration object; all other properties are
        optional.</para>
      </section>
    </section>

    <section>
      <title>Convenience Methods</title>

      <para>If you don't need the extensive configurability of
      <code>$.ajax</code>, and you don't care about handling errors, the Ajax
      convenience functions provided by jQuery can be useful, terse ways to
      accomplish Ajax requests. These methods are just "wrappers" around the
      core <code>$.ajax</code> method, and simply pre-set some of the options
      on the <code>$.ajax</code> method.</para>

      <para>The convenience methods provided by jQuery are:</para>

      <variablelist>
        <varlistentry>
          <term>$.get</term>

          <listitem>
            <para>Perform a GET request to the provided URL.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>$.post</term>

          <listitem>
            <para>Perform a POST request to the provided URL.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>$.getScript</term>

          <listitem>
            <para>Add a script to the page.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>$.getJSON</term>

          <listitem>
            <para>Perform a GET request, and expect JSON to be
            returned.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>In each case, the methods take the following arguments, in
      order:</para>

      <variablelist>
        <varlistentry>
          <term>url</term>

          <listitem>
            <para>The URL for the request. Required.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>data</term>

          <listitem>
            <para>The data to be sent to the server. Optional. This can either
            be an object or a query string, such as
            <code>foo=bar&amp;baz=bim</code>.</para>

            <note>
              <para>This option is not valid for
              <code>$.getScript</code>.</para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>success callback</term>

          <listitem>
            <para>A callback function to run if the request succeeds.
            Optional. The function receives the response data (converted to a
            JavaScript object if the data type was JSON), as well as the text
            status of the request and the raw request object.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>data type</term>

          <listitem>
            <para>The type of data you expect back from the server.
            Optional.</para>

            <note>
              <para>This option is only applicable for methods that don't
              already specify the data type in their name.</para>
            </note>
          </listitem>
        </varlistentry>
      </variablelist>

      <example>
        <title>Using jQuery's Ajax convenience methods</title>

        <para><programlisting>// get plain text or html
$.get('/users.php', { userId : 1234 }, function(resp) {
    console.log(resp);
});

// add a script to the page, then run a function defined in it
$.getScript('/static/js/myScript.js', function() {
    functionFromMyScript();
});

// get JSON-formatted data from the server
$.getJSON('/details.php', function(resp) {
    $.each(resp, function(k, v) {
        console.log(k + ' : ' + v);
    });
});</programlisting></para>
      </example>
    </section>

    <section>
      <title><code>$.fn.load</code></title>

      <para>The <code>$.fn.load</code> method is unique among jQuery’s Ajax
      methods in that it is called on a selection. The <code>$.fn.load</code>
      method fetches HTML from a URL, and uses the returned HTML to populate
      the selected element(s). In addition to providing a URL to the method,
      you can optionally provide a selector; jQuery will fetch only the
      matching content from the returned HTML.</para>

      <example>
        <title>Using <code>$.fn.load</code> to populate an element</title>

        <programlisting>$('#newContent').load('/foo.html');</programlisting>
      </example>

      <example>
        <title>Using <code>$.fn.load</code> to populate an element based on a
        selector</title>

        <programlisting>$('#newContent').load('/foo.html <emphasis role="bold">#myDiv h1:first</emphasis>', function(html) {
  alert('Content updated!');
});</programlisting>
      </example>
    </section>
  </section>

  <section>
    <title>Ajax and Forms</title>

    <para>jQuery’s ajax capabilities can be especially useful when dealing
    with forms. The <link xlink:href="http://jquery.malsup.com/form/">jQuery
    Form Plugin</link> is a well-tested tool for adding Ajax capabilities to
    forms, and you should generally use it for handling forms with Ajax rather
    than trying to roll your own solution for anything remotely complex. That
    said, there are a two jQuery methods you should know that relate to form
    processing in jQuery: <code>$.fn.serialize</code> and
    <code>$.fn.serializeArray</code>.</para>

    <example>
      <title>Turning form data into a query string</title>

      <programlisting>$('#myForm').serialize();</programlisting>
    </example>

    <example>
      <title>Creating an array of objects containing form data</title>

      <programlisting>$('#myForm').serializeArray();

// creates a structure like this:
[
    { name : 'field1', value : 123 },
    { name : 'field2', value : 'hello world' }
]</programlisting>
    </example>
  </section>

  <section>
    <title>Working with JSONP</title>

    <para>The advent of JSONP -- essentially a consensual cross-site scripting
    hack -- has opened the door to powerful mashups of content. Many prominent
    sites provide JSONP services, allowing you access to their content via a
    predefined API. A particularly great source of JSONP-formatted data is the
    <link xlink:href="http://developer.yahoo.com/yql/console/">Yahoo! Query
    Language</link>, which we'll use in the following example to fetch news
    about cats.</para>

    <example>
      <title>Using YQL and JSONP</title>

      <programlisting>$.ajax({
    url : 'http://query.yahooapis.com/v1/public/yql',

    // the name of the callback parameter,
    // as specified by the YQL service
    jsonp : 'callback',

    // tell jQuery we're expecting JSONP
    dataType : 'jsonp',

    // tell YQL what we want and that we want JSON
    data : {
        q : 'select title,abstract,url from search.news where query="cat"',
        format : 'json'
    },

    // work with the response
    success : function(response) {
        console.log(response);
    }
});</programlisting>
    </example>

    <para>jQuery handles all the complex aspects of JSONP behind-the-scenes --
    all we have to do is tell jQuery the name of the JSONP callback parameter
    specified by YQL ("callback" in this case), and otherwise the whole
    process looks and feels like a normal Ajax request.</para>
  </section>

  <section>
    <title>Ajax Events</title>

    <para>Often, you’ll want to perform an operation whenever an Ajax requests
    starts or stops, such as showing or hiding a loading indicator. Rather
    than defining this behavior inside every Ajax request, you can bind Ajax
    events to elements just like you'd bind other events. For a complete list
    of Ajax events, visit <link
    xlink:href="http://docs.jquery.com/Ajax_Events">http://docs.jquery.com/Ajax_Events</link>.</para>

    <example>
      <title>Setting up a loading indicator using Ajax Events</title>

      <programlisting>$('#loading_indicator')
    .ajaxStart(function() { $(this).show(); })
    .ajaxStop(function() { $(this).hide(); });</programlisting>
    </example>
  </section>

  <section>
    <title>Exercises</title>

    <xi:include href="exercises/load-external-content.xml"
                xpointer="element(/1)" />

    <xi:include href="exercises/load-json.xml" xpointer="element(/1)" />
  </section>
</chapter>
