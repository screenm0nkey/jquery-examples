<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Plugins</title>

  <section>
    <title>Finding &amp; Evaluating Plugins</title>

    <para>Plugins extend the basic jQuery functionality, and one of the most
    celebrated aspects of the library is its extensive plugin ecosystem. From
    table sorting to form validation to autocompletion ... if there’s a need
    for it, chances are good that someone has written a plugin for it.</para>

    <para>The quality of jQuery plugins varies widely. Many plugins are
    extensively tested and well-maintained, but others are hastily created and
    then ignored. More than a few fail to follow best practices.</para>

    <para>Google is your best initial resource for locating plugins, though
    the jQuery team is working on an improved plugin repository. Once you’ve
    identified some options via a Google search, you may want to consult the
    jQuery mailing list or the #jquery IRC channel to get input from
    others.</para>

    <para>When looking for a plugin to fill a need, do your homework. Ensure
    that the plugin is well-documented, and look for the author to provide
    lots of examples of its use. Be wary of plugins that do far more than you
    need; they can end up adding substantial overhead to your page. For more
    tips on spotting a subpar plugin, read <link
    xlink:href="http://remysharp.com/2010/06/03/signs-of-a-poorly-written-jquery-plugin/">Signs
    of a poorly written jQuery plugin</link> by Remy Sharp.</para>

    <para>Once you choose a plugin, you’ll need to add it to your page.
    Download the plugin, unzip it if necessary, place it your application’s
    directory structure, then include the plugin in your page using a script
    tag (after you include jQuery).</para>
  </section>

  <section>
    <title>Writing Plugins</title>

    <para>Sometimes you want to make a piece of functionality available
    throughout your code; for example, perhaps you want a single method you
    can call on a jQuery selection that performs a series of operations on the
    selection. In this case, you may want to write a plugin.</para>

    <para>Most plugins are simply methods created in the <code>$.fn</code>
    namespace. jQuery guarantees that a method called on a jQuery object will
    be able to access that jQuery object as <code>this</code> inside the
    method. In return, your plugin needs to guarantee that it returns the same
    object it received, unless explicitly documented otherwise.</para>

    <para>Here is an example of a simple plugin:</para>

    <example>
      <title>Creating a plugin to add and remove a class on hover</title>

      <programlisting>// defining the plugin
(function($){
    $.fn.hoverClass = function(c) {
        return this.hover(
            function() { $(this).toggleClass(c); }
        );
    };
}(jQuery);

// using the plugin
$('li').hoverClass('hover');</programlisting>
    </example>
  </section>

  <section>
    <title>Exercises</title>

    <xi:include href="exercises/sortable-plugin.xml" xpointer="element(/1)" />

    <xi:include href="exercises/striping-plugin.xml" xpointer="element(/1)" />
  </section>
</chapter>
